"#define LAMBERT
varying vec3 vLightFront;

uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 ambientLightColor;
uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];
uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];

varying vec3 vColor;

varying vec4 vShadowCoord[ MAX_SHADOWS ];
uniform mat4 shadowMatrix[ MAX_SHADOWS ];
void main() {
    vColor = color;
    vec3 objectNormal;
    objectNormal = normal;
    
    vec3 transformedNormal = normalMatrix * objectNormal;
    
    vec4 mvPosition;
    mvPosition = modelViewMatrix * vec4( position, 1.0 );
    gl_Position = projectionMatrix * mvPosition;
    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
    vLightFront = vec3( 0.0 );
    transformedNormal = normalize( transformedNormal );

    for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {
        vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );
        vec3 dirVector = normalize( lDirection.xyz );
        float dotProduct = dot( transformedNormal, dirVector );
        vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );
        vLightFront += directionalLightColor[ i ] * directionalLightWeighting;
    }

    vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;

    for( int i = 0; i < MAX_SHADOWS; i ++ ) {
        vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;
    }
}"